from flask import Flask
from threading import Thread
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import json
from google.oauth2 import service_account
from googleapiclient.discovery import build
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler

# ------------------- Telegram -------------------
TOKEN = os.getenv("BOT_TOKEN")

# ------------------- Google Drive -------------------
google_credentials = os.getenv("GOOGLE_CREDENTIALS")
if not google_credentials:
    raise ValueError("–ù–µ—Ç GOOGLE_CREDENTIALS! –î–æ–±–∞–≤—å –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")

service_account_info = json.loads(google_credentials)

# üîë —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ private_key
if "private_key" in service_account_info:
    service_account_info["private_key"] = service_account_info["private_key"].replace("\\n", "\n")

SCOPES = ['https://www.googleapis.com/auth/drive']
FOLDER_ID = '1nQECNPbttj32SnAhpdBjwWuYWJUUxtto'  # ID –ø–∞–ø–∫–∏ Obsidian –≤ Google Drive

credentials = service_account.Credentials.from_service_account_info(
    service_account_info, scopes=SCOPES
)
service = build('drive', 'v3', credentials=credentials)

# ------------------- Flask-—Å–µ—Ä–≤–µ—Ä -------------------
app_server = Flask(__name__)

@app_server.route("/")
def home():
    return "Bot is running!"

def run_server():
    app_server.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

# ------------------- Telegram-–±–æ—Ç (–∑–∞–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å–µ–∫—Ü–∏—é) -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ Render ü§ñ\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏\n"
        "/folders ‚Äî –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–∞–ø–∫–∞–º (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)\n"
        "/note <–∏–º—è> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ –∏–º–µ–Ω–∏ (–≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ/–∫–æ—Ä–Ω–µ)"
    )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(update.message.text)


# —Å—Ç–∞—Ä—ã–π /list (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –±—ã–ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç .md –≤ –∫–æ—Ä–Ω–µ FOLDER_ID)
async def list_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    results = service.files().list(
        q=f"'{FOLDER_ID}' in parents and mimeType='text/markdown'",
        fields="files(id, name)"
    ).execute()
    files = results.get('files', [])
    if not files:
        await update.message.reply_text("–ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç üò¢")
    else:
        names = "\n".join(file['name'] for file in files)
        await update.message.reply_text(f"–ó–∞–º–µ—Ç–∫–∏:\n{names}")


# –∫–æ–º–∞–Ω–¥–∞ /note <–∏–º—è_—Ñ–∞–π–ª–∞.md> ‚Äî –∏—â–µ—Ç –ø–æ –∏–º–µ–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–π (–∫–æ—Ä–Ω–µ–≤–æ–π) –ø–∞–ø–∫–µ
async def get_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /note <–∏–º—è_—Ñ–∞–π–ª–∞.md>")
        return

    filename = " ".join(context.args)
    results = service.files().list(
        q=f"'{FOLDER_ID}' in parents and name='{filename}' and mimeType='text/markdown'",
        fields="files(id, name)"
    ).execute()
    files = results.get('files', [])
    if not files:
        await update.message.reply_text("–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç –≤ –∫–æ—Ä–Ω–µ üò¢")
        return

    file_id = files[0]['id']
    content = service.files().get_media(fileId=file_id).execute()
    text = content.decode("utf-8")
    if len(text) > 4000:
        await update.message.reply_text(f"üìÑ {filename} (–ø–µ—Ä–≤—ã–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤):\n\n{text[:4000]}")
    else:
        await update.message.reply_text(f"üìÑ {filename}:\n\n{text}")


# --------- –ù–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–∞–ø–∫–∞–º —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏ ----------
# helper: –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ (folder_id). edit=True - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å callback —Å–æ–æ–±—â–µ–Ω–∏–µ
async def show_folder(update, context, folder_id=None, edit=False):
    if folder_id is None:
        folder_id = FOLDER_ID

    # –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏ –ø–æ–¥–ø–∞–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ folder_id
    results = service.files().list(
        q=f"'{folder_id}' in parents",
        fields="files(id, name, mimeType, parents)",
        pageSize=1000
    ).execute()
    items = results.get('files', [])

    if not items:
        text = "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞ üò¢"
        if edit and update.callback_query:
            await update.callback_query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        return

    keyboard = []
    # –∫–Ω–æ–ø–∫–∏: –∫–∞–∂–¥–∞—è –ø–∞–ø–∫–∞/–∑–∞–º–µ—Ç–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    for it in items:
        if it.get("mimeType") == "application/vnd.google-apps.folder":
            keyboard.append([InlineKeyboardButton(f"üìÅ {it['name']}", callback_data=f"folder:{it['id']}")])
        elif it.get("mimeType") == "text/markdown" or it['name'].lower().endswith(".md"):
            keyboard.append([InlineKeyboardButton(f"üìù {it['name']}", callback_data=f"note:{it['id']}")])
        else:
            # –ø—Ä–æ—á–∏–µ —Ñ–∞–π–ª—ã ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ —Ñ–∞–π–ª
            pass

    # –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å
    if folder_id != FOLDER_ID:
        try:
            meta = service.files().get(fileId=folder_id, fields="parents").execute()
            parents = meta.get("parents", [])
            parent_id = parents[0] if parents else FOLDER_ID
        except Exception:
            parent_id = FOLDER_ID
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"folder:{parent_id}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    if edit and update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø–∞–ø–∫—É –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É:", reply_markup=reply_markup)
    else:
        # –∫–æ–º–∞–Ω–¥–∞ /folders
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–∞–ø–∫—É –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É:", reply_markup=reply_markup)


# –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ file_id (–≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–∫–∏)
async def show_note_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str):
    # –ø–æ–ª—É—á–∏–º –∏–º—è –∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    meta = service.files().get(fileId=file_id, fields="name, parents").execute()
    name = meta.get("name", "note.md")
    parents = meta.get("parents", [])
    parent_id = parents[0] if parents else FOLDER_ID

    content = service.files().get_media(fileId=file_id).execute()
    text = content.decode("utf-8")
    if len(text) > 4000:
        text = text[:4000] + "\n\n...‚úÇÔ∏è (–æ–±—Ä–µ–∑–∞–Ω–æ)"

    # –ø—Ä–µ–¥–ª–æ–∂–∏–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥ –≤ –ø–∞–ø–∫—É"
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–ø–∫–µ", callback_data=f"folder:{parent_id}")]])
    await update.callback_query.message.reply_text(f"üìÑ {name}:\n\n{text}", reply_markup=kb)


# callback handler –¥–ª—è –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("folder:"):
        folder_id = data.split(":", 1)[1]
        await show_folder(update, context, folder_id=folder_id, edit=True)
    elif data.startswith("note:"):
        file_id = data.split(":", 1)[1]
        await show_note_callback(update, context, file_id)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


# –∫–æ–º–∞–Ω–¥–∞ /folders ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω—è (FOLDER_ID)
async def folders_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_folder(update, context, folder_id=FOLDER_ID, edit=False)


# ------------------- main (–∑–∞–º–µ–Ω–∏—Ç—å —Ö—ç–Ω–¥–ª–µ—Ä—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è) -------------------
def main():
    if not TOKEN:
        raise ValueError("–ù–µ—Ç BOT_TOKEN! –î–æ–±–∞–≤—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ –¥–ª—è Render (–æ—Å—Ç–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∫–∞–∫ —É —Ç–µ–±—è)
    thread = Thread(target=run_server)
    thread.start()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã (–≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏)
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_notes))
    app.add_handler(CommandHandler("note", get_note))
    app.add_handler(CommandHandler("folders", folders_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    app.run_polling()

if __name__ == "__main__":
    main()
