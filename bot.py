from flask import Flask
from threading import Thread
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import json
from google.oauth2 import service_account
from googleapiclient.discovery import build
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
from io import BytesIO

# ------------------- Telegram -------------------
TOKEN = os.getenv("BOT_TOKEN")

# ------------------- Google Drive -------------------
google_credentials = os.getenv("GOOGLE_CREDENTIALS")
if not google_credentials:
    raise ValueError("–ù–µ—Ç GOOGLE_CREDENTIALS! –î–æ–±–∞–≤—å –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")

service_account_info = json.loads(google_credentials)

# üîë —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ private_key
if "private_key" in service_account_info:
    service_account_info["private_key"] = service_account_info["private_key"].replace("\\n", "\n")

SCOPES = ['https://www.googleapis.com/auth/drive']
FOLDER_ID = '1nQECNPbttj32SnAhpdBjwWuYWJUUxtto'  # ID –ø–∞–ø–∫–∏ Obsidian –≤ Google Drive

credentials = service_account.Credentials.from_service_account_info(
    service_account_info, scopes=SCOPES
)
service = build('drive', 'v3', credentials=credentials)

# ------------------- Flask-—Å–µ—Ä–≤–µ—Ä -------------------
app_server = Flask(__name__)

@app_server.route("/")
def home():
    return "Bot is running!"

def run_server():
    app_server.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

 ------------------- Telegram-–±–æ—Ç -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ Render ü§ñ\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫\n"
        "/note <–∏–º—è> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–º–µ—Ç–∫—É"
    )


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(update.message.text)


async def list_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    all_files = get_all_files()
    notes = [f for f in all_files if f["mimeType"] == "text/markdown"]

    if not notes:
        await update.message.reply_text("–ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç üò¢")
        return

    # –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    for note in notes[:30]:  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 30, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard.append([InlineKeyboardButton(note["name"], callback_data=f"note:{note['id']}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:", reply_markup=reply_markup)


async def show_note_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    file_id = query.data.split(":")[1]

    # –ø–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
    meta = service.files().get(fileId=file_id, fields="name").execute()
    name = meta.get("name", "note.md")

    content = service.files().get_media(fileId=file_id).execute()
    text = content.decode("utf-8")

    # –∏—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è ![[...]]
    matches = re.findall(r"!\[\[(.*?)\]\]", text)

    # —É–±–∏—Ä–∞–µ–º –≤—Å–µ ![[...]] –∏–∑ —Ç–µ–∫—Å—Ç–∞
    clean_text = re.sub(r"!\[\[(.*?)\]\]", "", text)

    # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    if len(clean_text) > 4000:
        clean_text = clean_text[:4000] + "\n\n...‚úÇÔ∏è (–æ–±—Ä–µ–∑–∞–Ω–æ)"

    await query.message.reply_text(f"üìÑ {name}:\n\n{clean_text}")

    # üî• –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
    if matches:
        all_files = get_all_files()
        file_map = {f["name"].lower(): f["id"] for f in all_files}  # –¥–µ–ª–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä-–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫

        for m in matches:
            # –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è ‚Äî –¥–æ–±–∞–≤–∏–º .png
            if not (m.lower().endswith(".png") or m.lower().endswith(".jpg")):
                m = m + ".png"

            file_id = file_map.get(m.lower())
            if file_id:
                img_data = service.files().get_media(fileId=file_id).execute()
                bio = BytesIO(img_data)
                bio.name = m
                await query.message.reply_photo(InputFile(bio))

# ------------------- main -------------------
def main():
    if not TOKEN:
        raise ValueError("–ù–µ—Ç BOT_TOKEN! –î–æ–±–∞–≤—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ –¥–ª—è Render
    thread = Thread(target=run_server)
    thread.start()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_notes))
    app.add_handler(CommandHandler("note", list_notes))  # –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    app.add_handler(CallbackQueryHandler(show_note_callback, pattern="^note:"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    app.run_polling()


if __name__ == "__main__":
    main()
