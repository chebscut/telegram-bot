import os
import json
import re
from io import BytesIO
from threading import Thread
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from google.oauth2 import service_account
from googleapiclient.discovery import build

# ------------------- Telegram -------------------
TOKEN = os.getenv("BOT_TOKEN")

# ------------------- Google Drive -------------------
google_credentials = os.getenv("GOOGLE_CREDENTIALS")
if not google_credentials:
    raise ValueError("–ù–µ—Ç GOOGLE_CREDENTIALS! –î–æ–±–∞–≤—å –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")

service_account_info = json.loads(google_credentials)

# üîë —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ private_key
if "private_key" in service_account_info:
    service_account_info["private_key"] = service_account_info["private_key"].replace("\\n", "\n")

SCOPES = ['https://www.googleapis.com/auth/drive']
FOLDER_ID = '1nQECNPbttj32SnAhpdBjwWuYWJUUxtto'  # ID –ø–∞–ø–∫–∏ Obsidian –≤ Google Drive

credentials = service_account.Credentials.from_service_account_info(
    service_account_info, scopes=SCOPES
)
service = build('drive', 'v3', credentials=credentials)

# ------------------- Flask-—Å–µ—Ä–≤–µ—Ä -------------------
app_server = Flask(__name__)

@app_server.route("/")
def home():
    return "Bot is running!"

def run_server():
    app_server.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

# ------------------- –†–∞–±–æ—Ç–∞ —Å Drive -------------------
def get_all_files(folder_id=FOLDER_ID):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –∏ –ø–æ–¥–ø–∞–ø–∫–∞—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
    files = []
    folders_to_check = [folder_id]

    while folders_to_check:
        current_folder = folders_to_check.pop()
        results = service.files().list(
            q=f"'{current_folder}' in parents",
            fields="files(id, name, mimeType)"
        ).execute()
        for f in results.get('files', []):
            if f['mimeType'] == 'application/vnd.google-apps.folder':
                folders_to_check.append(f['id'])
            else:
                files.append(f)
    return files

def get_folder_structure(folder_id=FOLDER_ID):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ {folder_name: [files]}"""
    structure = {}
    all_files = get_all_files(folder_id)
    for f in all_files:
        folder_name = f.get('parents', [folder_id])[0]
        if folder_name not in structure:
            structure[folder_name] = []
        structure[folder_name].append(f)
    return structure

# ------------------- Telegram-–±–æ—Ç -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ Render ü§ñ\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/folders ‚Äî —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏"
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
async def list_folders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    all_files = get_all_files()
    folder_map = {}
    for f in all_files:
        parent_id = f.get('parents', [FOLDER_ID])[0]
        folder_map[parent_id] = folder_map.get(parent_id, [])
    keyboard = [
        [InlineKeyboardButton("–í—Å–µ –∑–∞–º–µ—Ç–∫–∏", callback_data=f"folder:{FOLDER_ID}")]
    ]
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    for f in all_files:
        if f['mimeType'] == 'application/vnd.google-apps.folder':
            keyboard.append([InlineKeyboardButton(f['name'], callback_data=f"folder:{f['id']}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ 
async def folder_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    folder_id = query.data.split(":")[1]
    parent_id = query.data.split(":")[2] if ":" in query.data else FOLDER_ID

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
    folders_result = service.files().list(
        q=f"'{folder_id}' in parents and mimeType='application/vnd.google-apps.folder'",
        fields="files(id, name)"
    ).execute()
    folders = folders_result.get('files', [])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
    notes_result = service.files().list(
        q=f"'{folder_id}' in parents and mimeType='text/markdown'",
        fields="files(id, name)"
    ).execute()
    notes = notes_result.get('files', [])

    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∞–ø–æ–∫
    for f in folders:
        keyboard.append([InlineKeyboardButton(f['name'], callback_data=f"folder:{f['id']}:{folder_id}")])

    # –ö–Ω–æ–ø–∫–∏ –∑–∞–º–µ—Ç–æ–∫
    for n in notes:
        keyboard.append([InlineKeyboardButton(n['name'], callback_data=f"note:{n['id']}:{folder_id}")])

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ –Ω–µ –∫–æ—Ä–µ–Ω—å
    if folder_id != FOLDER_ID:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"folder:{parent_id}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É:", reply_markup=reply_markup)
# –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
async def show_note_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    parts = query.data.split(":")
    file_id = parts[1]
    folder_id = parts[2] if len(parts) > 2 else FOLDER_ID

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"folder:{folder_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í–µ—Ä–Ω—É—Ç—å—Å—è:", reply_markup=reply_markup)

    meta = service.files().get(fileId=file_id, fields="name").execute()
    name = meta.get("name", "note.md")

    content = service.files().get_media(fileId=file_id).execute()
    text = content.decode("utf-8")

    # –∏—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ ![[...]]
    matches = re.findall(r"!\[\[(.*?)\]\]", text, flags=re.IGNORECASE | re.MULTILINE)


    # —É–±–∏—Ä–∞–µ–º –≤—Å–µ ![[...]] –∏–∑ —Ç–µ–∫—Å—Ç–∞
    clean_text = re.sub(r"!\[\[(.*?)\]\]", "", text, flags=re.IGNORECASE | re.MULTILINE)

    # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    if len(clean_text) > 4000:
        clean_text = clean_text[:4000] + "\n\n...‚úÇÔ∏è (–æ–±—Ä–µ–∑–∞–Ω–æ)"

    await query.message.reply_text(f"üìÑ {name}:\n\n{clean_text.strip()}")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
    if matches:
        all_files = get_all_files()
        file_map = {f["name"].lower(): f["id"] for f in all_files}
        for m in matches:
            if not (m.lower().endswith(".png") or m.lower().endswith(".jpg")):
                m = m + ".png"
            file_id_img = file_map.get(m.lower())
            if file_id_img:
                img_data = service.files().get_media(fileId=file_id_img).execute()
                bio = BytesIO(img_data)
                bio.name = m
                await query.message.reply_photo(InputFile(bio))

# ------------------- main -------------------
def main():
    if not TOKEN:
        raise ValueError("–ù–µ—Ç BOT_TOKEN! –î–æ–±–∞–≤—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")

    thread = Thread(target=run_server)
    thread.start()

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("folders", list_folders))
    app.add_handler(CallbackQueryHandler(folder_callback, pattern=r"^folder:"))
    app.add_handler(CallbackQueryHandler(show_note_callback, pattern=r"^note:"))
    app.run_polling()

if __name__ == "__main__":
    main()
