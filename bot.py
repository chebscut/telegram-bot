from flask import Flask
from threading import Thread
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import json
from google.oauth2 import service_account
from googleapiclient.discovery import build

# ------------------- Telegram -------------------
TOKEN = os.getenv("BOT_TOKEN")

# ------------------- Google Drive -------------------
google_credentials = os.getenv("GOOGLE_CREDENTIALS")
if not google_credentials:
    raise ValueError("–ù–µ—Ç GOOGLE_CREDENTIALS! –î–æ–±–∞–≤—å –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")

service_account_info = json.loads(google_credentials)

# üîë —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ private_key
if "private_key" in service_account_info:
    service_account_info["private_key"] = service_account_info["private_key"].replace("\\n", "\n")

SCOPES = ['https://www.googleapis.com/auth/drive']
FOLDER_ID = '1nQECNPbttj32SnAhpdBjwWuYWJUUxtto'  # ID –ø–∞–ø–∫–∏ Obsidian –≤ Google Drive

credentials = service_account.Credentials.from_service_account_info(
    service_account_info, scopes=SCOPES
)
service = build('drive', 'v3', credentials=credentials)

# ------------------- Flask-—Å–µ—Ä–≤–µ—Ä -------------------
app_server = Flask(__name__)

@app_server.route("/")
def home():
    return "Bot is running!"

def run_server():
    app_server.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

# ------------------- Telegram-–±–æ—Ç -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Obsidian —á–µ—Ä–µ–∑ Google Drive ü§ñ\n\n"
                                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                    "/list ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫\n"
                                    "/note <–∏–º—è> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
                                    "/search <—Ç–µ–∫—Å—Ç> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {update.message.text}")

async def list_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    results = service.files().list(
        q=f"'{FOLDER_ID}' in parents and mimeType='text/markdown'",
        fields="files(id, name)"
    ).execute()
    files = results.get('files', [])
    if not files:
        await update.message.reply_text("–ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç üò¢")
    else:
        names = "\n".join(file['name'] for file in files)
        await update.message.reply_text(f"–ó–∞–º–µ—Ç–∫–∏:\n{names}")

async def get_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /note <–∏–º—è_—Ñ–∞–π–ª–∞.md>")
        return
    filename = " ".join(context.args)

    results = service.files().list(
        q=f"'{FOLDER_ID}' in parents and name='{filename}'",
        fields="files(id, name)"
    ).execute()
    files = results.get('files', [])
    if not files:
        await update.message.reply_text("–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç üò¢")
    else:
        file_id = files[0]['id']
        content = service.files().get_media(fileId=file_id).execute()
        text = content.decode("utf-8")
        await update.message.reply_text(f"üìÑ {filename}:\n\n{text[:4000]}")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –≤ Telegram

async def search_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ>")
        return
    keyword = " ".join(context.args).lower()

    results = service.files().list(
        q=f"'{FOLDER_ID}' in parents and mimeType='text/markdown'",
        fields="files(id, name)"
    ).execute()
    files = results.get('files', [])

    found = []
    for file in files:
        content = service.files().get_media(fileId=file['id']).execute().decode("utf-8")
        if keyword in content.lower():
            found.append(file['name'])

    if found:
        await update.message.reply_text("üîé –ù–∞–π–¥–µ–Ω–æ:\n" + "\n".join(found))
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢")

async def upload_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.document:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–∞–π–ª `.md` –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        return

    file = await update.message.document.get_file()
    content = await file.download_as_bytearray()

    file_metadata = {
        "name": update.message.document.file_name,
        "parents": [FOLDER_ID]
    }
    service.files().create(
        body=file_metadata,
        media_body={"mimeType": "text/markdown", "body": content}
    ).execute()

    await update.message.reply_text(f"‚úÖ –§–∞–π–ª {update.message.document.file_name} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive!")

# ------------------- main -------------------

def main():
    if not TOKEN:
        raise ValueError("–ù–µ—Ç BOT_TOKEN! –î–æ–±–∞–≤—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ –¥–ª—è Render
    thread = Thread(target=run_server)
    thread.start()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_notes))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.run_polling()

if __name__ == "__main__":
    main()
