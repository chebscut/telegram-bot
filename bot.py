from flask import Flask
from threading import Thread
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import json
from google.oauth2 import service_account
from googleapiclient.discovery import build

# ------------------- Telegram -------------------
TOKEN = os.getenv("BOT_TOKEN")

# ------------------- Google Drive -------------------
google_credentials = os.getenv("GOOGLE_CREDENTIALS")
if not google_credentials:
    raise ValueError("–ù–µ—Ç GOOGLE_CREDENTIALS! –î–æ–±–∞–≤—å –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")

service_account_info = json.loads(google_credentials)

# üîë —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ private_key
if "private_key" in service_account_info:
    service_account_info["private_key"] = service_account_info["private_key"].replace("\\n", "\n")

SCOPES = ['https://www.googleapis.com/auth/drive']
FOLDER_ID = '1nQECNPbttj32SnAhpdBjwWuYWJUUxtto'  # ID –ø–∞–ø–∫–∏ Obsidian –≤ Google Drive

credentials = service_account.Credentials.from_service_account_info(
    service_account_info, scopes=SCOPES
)
service = build('drive', 'v3', credentials=credentials)

# ------------------- Flask-—Å–µ—Ä–≤–µ—Ä -------------------
app_server = Flask(__name__)

@app_server.route("/")
def home():
    return "Bot is running!"

def run_server():
    app_server.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

# ------------------- Telegram-–±–æ—Ç -------------------
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# üìÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
async def list_folders(update: Update, context: ContextTypes.DEFAULT_TYPE, folder_id=None):
    if folder_id is None:
        folder_id = FOLDER_ID  # –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞

    results = service.files().list(
        q=f"'{folder_id}' in parents",
        fields="files(id, name, mimeType)"
    ).execute()
    files = results.get('files', [])

    if not files:
        await update.message.reply_text("–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞ üò¢")
        return

    keyboard = []
    for f in files:
        if f["mimeType"] == "application/vnd.google-apps.folder":  # —ç—Ç–æ –ø–∞–ø–∫–∞
            keyboard.append([InlineKeyboardButton(f"üìÇ {f['name']}", callback_data=f"folder:{f['id']}")])
        elif f["mimeType"] == "text/markdown":  # —ç—Ç–æ –∑–∞–º–µ—Ç–∫–∞
            keyboard.append([InlineKeyboardButton(f"üìù {f['name']}", callback_data=f"note:{f['id']}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–∞–ø–∫—É –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É:", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø–∞–ø–∫—É –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É:", reply_markup=reply_markup)


# üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
async def show_note(update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str):
    file = service.files().get_media(fileId=file_id).execute()
    text = file.decode("utf-8")

    # –æ–±—Ä–µ–∂–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (—á—Ç–æ–±—ã Telegram –Ω–µ —Ä—É–≥–∞–ª—Å—è)
    if len(text) > 4000:
        text = text[:4000] + "\n\n...‚úÇÔ∏è –∑–∞–º–µ—Ç–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∞"

    await update.callback_query.message.reply_text(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n\n{text}")


# üéõ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data.startswith("folder:"):
        folder_id = data.split(":", 1)[1]
        await list_folders(update, context, folder_id)
    elif data.startswith("note:"):
        file_id = data.split(":", 1)[1]
        await show_note(update, context, file_id)


# ‚ö°Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
def register_handlers(app):
    app.add_handler(CommandHandler("folders", list_folders))
    app.add_handler(CallbackQueryHandler(button_handler))



# ------------------- main -------------------

def main():
    if not TOKEN:
        raise ValueError("–ù–µ—Ç BOT_TOKEN! –î–æ–±–∞–≤—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ –¥–ª—è Render
    thread = Thread(target=run_server)
    thread.start()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_notes))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.add_handler(CommandHandler("note", get_note))
    app.run_polling()
    

if __name__ == "__main__":
    main()
