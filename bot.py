from flask import Flask
from threading import Thread
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import json
from google.oauth2 import service_account
from googleapiclient.discovery import build

# ------------------- Telegram -------------------
TOKEN = os.getenv("BOT_TOKEN")

# ------------------- Google Drive -------------------
google_credentials = os.getenv("GOOGLE_CREDENTIALS")
if not google_credentials:
    raise ValueError("–ù–µ—Ç GOOGLE_CREDENTIALS! –î–æ–±–∞–≤—å –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")

service_account_info = json.loads(google_credentials)

# üîë —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ private_key
if "private_key" in service_account_info:
    service_account_info["private_key"] = service_account_info["private_key"].replace("\\n", "\n")

SCOPES = ['https://www.googleapis.com/auth/drive']
FOLDER_ID = '1nQECNPbttj32SnAhpdBjwWuYWJUUxtto'  # ID –ø–∞–ø–∫–∏ Obsidian –≤ Google Drive

credentials = service_account.Credentials.from_service_account_info(
    service_account_info, scopes=SCOPES
)
service = build('drive', 'v3', credentials=credentials)

# ------------------- Flask-—Å–µ—Ä–≤–µ—Ä -------------------
app_server = Flask(__name__)

@app_server.route("/")
def home():
    return "Bot is running!"

def run_server():
    app_server.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

# ------------------- Telegram-–±–æ—Ç -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ Render ü§ñ")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(update.message.text)

async def list_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    results = service.files().list(
        q=f"'{FOLDER_ID}' in parents and mimeType='text/markdown'",
        fields="files(id, name)"
    ).execute()
    files = results.get('files', [])
    if not files:
        await update.message.reply_text("–ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç üò¢")
    else:
        names = "\n".join(file['name'] for file in files)
        await update.message.reply_text(f"–ó–∞–º–µ—Ç–∫–∏:\n{names}")

def main():
    if not TOKEN:
        raise ValueError("–ù–µ—Ç BOT_TOKEN! –î–æ–±–∞–≤—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ –¥–ª—è Render
    thread = Thread(target=run_server)
    thread.start()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler_
